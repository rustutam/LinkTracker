app:
  telegram-token: ${TELEGRAM_TOKEN} # env variable
  scrapper-host: http://localhost:8081
  http-timeout: 1000

kafka:
  link-updates:
    topic: link-update
    fail-on-processing: false
    consumer-group: default-group
    concurency: 1

spring:
  application:
    name: Bot
  liquibase:
    enabled: false
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
  kafka:
    bootstrap-servers: localhost:19092
    consumer.properties:
      enable.auto.commit: false
      auto.offset.reset: earliest
      isolation.level: read_committed
      fetch:
        min.bytes: 1024
        max.bytes: 1048576
        max.wait.ms: 10000
      max:
        poll:
          interval.ms: 10000
          records: 10
    cloud:
      zookeeper:
        config.enabled: false
        connect-string: localhost:2181

server:
  port: 8080

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui

retry-codes:
  instances:
    - github
    - so
    - bot
  codes:
    - 500
    - 429

resilience4j.circuitbreaker:
  instances:
    cb1:
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 1
      slidingWindowSize: 1
      failureRateThreshold: 100
      waitDurationInOpenState: 1s
      permittedNumberOfCallsInHalfOpenState: 1

resilience4j.retry:
  instances:
    retryRules:
      maxAttempts: 3
      waitDuration: 1000
      exponential-backoff-multiplier: 2
      enable-exponential-backoff: true
      ignoreExceptions:
        - backend.academy.bot.api.dto.ApiErrorResponse

resilience4j.ratelimiter:
  instances:
    rateLimiter:
      limitForPeriod: 3
      timeout-duration: 1s
      limitRefreshPeriod: 5s

logging:
  level:
    io.github.resilience4j.retry: DEBUG
    io.github.resilience4j.circuitbreaker: DEBUG
    io.github.resilience4j.bulkhead: DEBUG
    io.github.resilience4j.timelimiter: DEBUG
    io.github.resilience4j.ratelimiter: DEBUG

